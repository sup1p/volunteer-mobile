import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
  Dimensions,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Send, Bot, User, CircleHelp as HelpCircle, FileText, TriangleAlert as AlertTriangle } from 'lucide-react-native';

const { width } = Dimensions.get('window');

interface Message {
  id: string;
  text: string;
  isBot: boolean;
  timestamp: Date;
  type?: 'suggestion' | 'normal';
}

interface QuickAction {
  id: string;
  title: string;
  icon: any;
  response: string;
}

export default function ChatScreen() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —Ç–æ–º, –∫–∞–∫ –≤—ã—è–≤–ª—è—Ç—å –∫–æ—Ä—Ä—É–ø—Ü–∏—é, –∫—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –∏ –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      isBot: true,
      timestamp: new Date(),
    },
  ]);
  
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const scrollViewRef = useRef<ScrollView>(null);

  const quickActions: QuickAction[] = [
    {
      id: '1',
      title: '–ö–∞–∫ —Å–æ–æ–±—â–∏—Ç—å –æ –∫–æ—Ä—Ä—É–ø—Ü–∏–∏?',
      icon: AlertTriangle,
      response: '–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ —Å–æ–æ–±—â–∏—Ç—å –æ –∫–æ—Ä—Ä—É–ø—Ü–∏–∏:\n\n1. –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –ì–µ–Ω–ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—ã: 8-800-200-78-78\n2. –°–∞–π—Ç –°–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–º–∏—Ç–µ—Ç–∞: sledcom.ru\n3. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–ì–æ—Å—É—Å–ª—É–≥–∏"\n4. –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã\n\n–í–∞–∂–Ω–æ: –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª –∞–Ω–æ–Ω–∏–º–Ω–æ. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å.',
    },
    {
      id: '2',
      title: '–ß—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?',
      icon: HelpCircle,
      response: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö:\n\n‚úÖ –°–æ–±–ª—é–¥–∞–π—Ç–µ –º–∏—Ä–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä\n‚úÖ –§–∏–∫—Å–∏—Ä—É–π—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ\n‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏\n‚úÖ –ù–µ –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã\n‚úÖ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ø—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—è–º\n\n–ü–æ–º–Ω–∏—Ç–µ: —Ü–µ–ª—å - –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø—Ä–æ–±–ª–µ–º–µ, –∞ –Ω–µ —Å–æ–∑–¥–∞—Ç—å –±–µ—Å–ø–æ—Ä—è–¥–∫–∏.',
    },
    {
      id: '3',
      title: '–ü—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ—Ä—Ä—É–ø—Ü–∏–∏',
      icon: FileText,
      response: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:\n\nüî¥ –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\nüî¥ –ù–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –æ–∫–∞–∑–∞–Ω–∏–∏ —É—Å–ª—É–≥\nüî¥ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ "—É—Å–∫–æ—Ä–∏—Ç—å" –ø—Ä–æ—Ü–µ—Å—Å –∑–∞ –¥–µ–Ω—å–≥–∏\nüî¥ –ü—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ –∫ –ø–æ–∫—É–ø–∫–µ —É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\nüî¥ –ó–∞–≤—ã—à–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –≤ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞—Ö\nüî¥ –ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä\n\n–ï—Å–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏ —Ç–∞–∫–æ–µ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏—Ç–µ!',
    },
  ];

  const predefinedResponses = [
    {
      keywords: ['—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'],
      response: '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ì–ª–∞–≤–Ω–∞—è"\n2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ\n3. –ù–∞–∂–º–∏—Ç–µ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"\n4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n5. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ email\n\n–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.',
    },
    {
      keywords: ['–±–∞–ª–ª—ã', '–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã', '–æ—á–∫–∏', '—Ä–µ–π—Ç–∏–Ω–≥'],
      response: '–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:\n\n‚≠ê –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ (50-100 –±–∞–ª–ª–æ–≤)\n‚≠ê –£—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö (25-75 –±–∞–ª–ª–æ–≤)\n‚≠ê –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π (5-25 –±–∞–ª–ª–æ–≤)\n‚≠ê –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–∏–∑–æ–≤ (10-30 –±–∞–ª–ª–æ–≤)\n‚≠ê –ü–æ–¥–∞—á–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (50-150 –±–∞–ª–ª–æ–≤)\n\n–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.',
    },
    {
      keywords: ['–∞–Ω–æ–Ω–∏–º–Ω–æ', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å'],
      response: '–í–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:\n\nüîí –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\nüîí –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º\nüîí –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏\nüîí –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é "–ê–Ω–æ–Ω–∏–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª" –≤ —Ä–∞–∑–¥–µ–ª–µ –æ—Ç—á–µ—Ç–æ–≤.',
    },
  ];

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    setTimeout(() => {
      scrollViewRef.current?.scrollToEnd({ animated: true });
    }, 100);
  };

  const sendMessage = (text: string) => {
    if (!text.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: text.trim(),
      isBot: false,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

    // Simulate bot response
    setTimeout(() => {
      const botResponse = generateBotResponse(text.trim());
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        isBot: true,
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000);
  };

  const generateBotResponse = (userInput: string): string => {
    const lowerInput = userInput.toLowerCase();
    
    // Check for predefined responses
    for (const response of predefinedResponses) {
      if (response.keywords.some(keyword => lowerInput.includes(keyword))) {
        return response.response;
      }
    }

    // Default responses based on common topics
    if (lowerInput.includes('—Å–ø–∞—Å–∏–±–æ') || lowerInput.includes('–±–ª–∞–≥–æ–¥–∞—Ä—é')) {
      return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!';
    }

    if (lowerInput.includes('–ø–æ–º–æ—â—å') || lowerInput.includes('–ø–æ–º–æ–≥–∏')) {
      return '–ö–æ–Ω–µ—á–Ω–æ! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –∞–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ:\n\n‚Ä¢ –ü–æ–¥–∞—á–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ –∫–æ—Ä—Ä—É–ø—Ü–∏–∏\n‚Ä¢ –£—á–∞—Å—Ç–∏–∏ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö\n‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤ –∏ –Ω–∞–≥—Ä–∞–¥\n‚Ä¢ –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è\n\n–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?';
    }

    if (lowerInput.includes('—Å—É–¥') || lowerInput.includes('—Å—É–¥—å—è')) {
      return '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–æ—Ä—Ä—É–ø—Ü–∏–∏ –≤ —Å—É–¥–µ–±–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ:\n\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è –í—ã—Å—à–µ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å—É–¥–∞: +7 (495) 987-89-50\nüìû –ê–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω–∞—è –ª–∏–Ω–∏—è –í–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ —Å—É–¥–∞: +7 (495) 690-32-95\n\n–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã.';
    }

    // Generic helpful response
    return '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n‚Ä¢ –ò–∑—É—á–∏—Ç—å —Ä–∞–∑–¥–µ–ª "–û–±—É—á–µ–Ω–∏–µ" –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏ –∞–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–º–æ—â—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ–º –≤—ã—à–µ.';
  };

  const handleQuickAction = (action: QuickAction) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      text: action.title,
      isBot: false,
      timestamp: new Date(),
    };

    const botMessage: Message = {
      id: (Date.now() + 1).toString(),
      text: action.response,
      isBot: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage, botMessage]);
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <LinearGradient
        colors={['#667eea', '#764ba2']}
        style={styles.header}
      >
        <View style={styles.headerContent}>
          <View style={styles.botInfo}>
            <View style={styles.botAvatar}>
              <Bot color="#ffffff" size={24} />
            </View>
            <View>
              <Text style={styles.botName}>–ò–ò-–ü–æ–º–æ—â–Ω–∏–∫</Text>
              <Text style={styles.botStatus}>–û–Ω–ª–∞–π–Ω ‚Ä¢ –û—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–æ</Text>
            </View>
          </View>
        </View>
      </LinearGradient>

      {/* Quick Actions */}
      <View style={styles.quickActions}>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          {quickActions.map((action) => {
            const IconComponent = action.icon;
            return (
              <TouchableOpacity
                key={action.id}
                style={styles.quickActionButton}
                onPress={() => handleQuickAction(action)}
              >
                <IconComponent color="#667eea" size={18} />
                <Text style={styles.quickActionText}>{action.title}</Text>
              </TouchableOpacity>
            );
          })}
        </ScrollView>
      </View>

      <KeyboardAvoidingView
        style={styles.chatContainer}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        keyboardVerticalOffset={0}
      >
        {/* Messages */}
        <ScrollView
          ref={scrollViewRef}
          style={styles.messagesContainer}
          showsVerticalScrollIndicator={false}
          contentContainerStyle={styles.messagesContent}
        >
          {messages.map((message) => (
            <View
              key={message.id}
              style={[
                styles.messageContainer,
                message.isBot ? styles.botMessageContainer : styles.userMessageContainer,
              ]}
            >
              {message.isBot && (
                <View style={styles.messageAvatar}>
                  <Bot color="#667eea" size={16} />
                </View>
              )}
              
              <View
                style={[
                  styles.messageBubble,
                  message.isBot ? styles.botMessageBubble : styles.userMessageBubble,
                ]}
              >
                <Text
                  style={[
                    styles.messageText,
                    message.isBot ? styles.botMessageText : styles.userMessageText,
                  ]}
                >
                  {message.text}
                </Text>
                <Text
                  style={[
                    styles.messageTime,
                    message.isBot ? styles.botMessageTime : styles.userMessageTime,
                  ]}
                >
                  {formatTime(message.timestamp)}
                </Text>
              </View>
              
              {!message.isBot && (
                <View style={styles.messageAvatar}>
                  <User color="#ffffff" size={16} />
                </View>
              )}
            </View>
          ))}
          
          {isTyping && (
            <View style={[styles.messageContainer, styles.botMessageContainer]}>
              <View style={styles.messageAvatar}>
                <Bot color="#667eea" size={16} />
              </View>
              <View style={[styles.messageBubble, styles.botMessageBubble]}>
                <Text style={styles.typingText}>–ü–µ—á–∞—Ç–∞–µ—Ç...</Text>
              </View>
            </View>
          )}
        </ScrollView>

        {/* Input */}
        <View style={styles.inputContainer}>
          <TextInput
            style={styles.textInput}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
            placeholderTextColor="#999"
            value={inputText}
            onChangeText={setInputText}
            multiline
            maxLength={500}
          />
          <TouchableOpacity
            style={[
              styles.sendButton,
              !inputText.trim() && styles.sendButtonDisabled,
            ]}
            onPress={() => sendMessage(inputText)}
            disabled={!inputText.trim()}
          >
            <Send color="#ffffff" size={20} />
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    paddingHorizontal: 20,
    paddingVertical: 15,
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  botInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  botAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  botName: {
    fontSize: 18,
    fontFamily: 'Inter-Bold',
    color: '#ffffff',
  },
  botStatus: {
    fontSize: 14,
    fontFamily: 'Inter-Medium',
    color: '#ffffff',
    opacity: 0.8,
  },
  quickActions: {
    paddingVertical: 15,
    paddingLeft: 20,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  quickActionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f0f4ff',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
    marginRight: 10,
  },
  quickActionText: {
    fontSize: 14,
    fontFamily: 'Inter-Medium',
    color: '#667eea',
    marginLeft: 6,
  },
  chatContainer: {
    flex: 1,
  },
  messagesContainer: {
    flex: 1,
    paddingHorizontal: 20,
  },
  messagesContent: {
    paddingVertical: 20,
  },
  messageContainer: {
    flexDirection: 'row',
    marginBottom: 15,
    alignItems: 'flex-end',
  },
  botMessageContainer: {
    justifyContent: 'flex-start',
  },
  userMessageContainer: {
    justifyContent: 'flex-end',
  },
  messageAvatar: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: '#f0f4ff',
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 8,
  },
  messageBubble: {
    maxWidth: width * 0.7,
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 18,
  },
  botMessageBubble: {
    backgroundColor: '#ffffff',
    borderBottomLeftRadius: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  userMessageBubble: {
    backgroundColor: '#667eea',
    borderBottomRightRadius: 4,
  },
  messageText: {
    fontSize: 16,
    fontFamily: 'Inter-Medium',
    lineHeight: 22,
  },
  botMessageText: {
    color: '#333',
  },
  userMessageText: {
    color: '#ffffff',
  },
  messageTime: {
    fontSize: 11,
    fontFamily: 'Inter-Medium',
    marginTop: 5,
  },
  botMessageTime: {
    color: '#999',
  },
  userMessageTime: {
    color: '#ffffff',
    opacity: 0.7,
  },
  typingText: {
    fontSize: 16,
    fontFamily: 'Inter-Medium',
    color: '#999',
    fontStyle: 'italic',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    paddingHorizontal: 20,
    paddingVertical: 15,
    backgroundColor: '#ffffff',
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
  },
  textInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 25,
    paddingHorizontal: 20,
    paddingVertical: 12,
    paddingTop: 12,
    fontSize: 16,
    fontFamily: 'Inter-Medium',
    maxHeight: 100,
    marginRight: 10,
    backgroundColor: '#f8f9fa',
  },
  sendButton: {
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: '#667eea',
    justifyContent: 'center',
    alignItems: 'center',
  },
  sendButtonDisabled: {
    backgroundColor: '#ccc',
  },
});